;;=============================================================================;;   
;;                 Simple Rocket Shooting Game                                 ;;
;;                 Tested on DOSBox and emu8086                                ;;
;;=============================================================================;;
;;                  Created by: Michael Malak   	                	       ;;
;;=============================================================================;;

;  ما هي اللعبة؟
; صواريخ تتحرك من يمين ليسار الشاشة بشكل (يبدو) عشوائي
; على اللاعب تحريك رمز يمين و يسار و من خلال الضغط على مسافة يستطيع اطلق طلاقات
; فى حالة لمس الطلقة أي من الصواريخ يحتسب نقطة واحدة للاعب
;فى حالة تخطى الطلقة للصاروخ يفقد اللاعب نقطة من نقاط الحياة كما تزيد نقاط الحياة بنقطة
; نقاط الحياة لا يمكن ان تزيد عن 9
; تبدأ نقاط الحياة من 6
; ف حالة تخطي اكثر من 6 صورايخ تعتبر اللعبة انتهت 
; النتيجة النهائية هي عدد الصواريخ التى ضربت خلال اللعبة الواحدة
;توجد 3 مستويات تتحكم فى سرعة اللعبة
; مستوي سهل اقل من 6
; مستوى صعب اقل من 11
; مستوى خارج اعلى من 10

;خوارزمية اللعبة كالاتى:
;بعد عرض شاشة البدء و ادخال الاسم
;أولا تحريك الصواريخ:
; و ذلك بالتأكد من اتجاة الحركة سواء يمين او يسار و من ثم اختيار الاجراء المناسب
; يقوم الاجراء اولا برسم مربع جديد و من ثم مسح القديم 
; يقوم الاجراء بالتأكد من وصول الصاروخ لنهاية الشاشة 
; فى حالة الوصول لنهاية الشاشة يمسح الاجراء ما قد رسمه و يقول بنداء اجراء اخر لتغيير القيم 
; تغيير القيم يكون بشكل شبه عشوائي يعتمد على ساعة النظام
;القيم المتغيرة فى الصاروخ تشمل اللون و الصف الذي فيه و الاتجاه 
;و كلها تنده فى حالة وصول الصاروخ لنهاية الشاشة

; ثانيا تحريك الطلقة:
; اولا و قبل اي شئ اقوم بالتأكد من وجود طلقة فى الشاشة
; اذا لم توجد استمر اما اذا وجدت اقوم بنداء اجراء للتأكد من ان الطلقة اذا رسمتها الأن فسوف تلمس صاروخ
; او سوف تصل لنهاية الشاشة
; فى الحالة الاولى و الثانية امسح الطلقة و اتأكد انها لن ترسم ثانية
; فى الحالة الأولى امسح الصاروخ و ازيد نقاط الحياة و نقاط الاهداف
; فى الحالة الثانية فقط ازيد نقاط الاخفاق
;غير الحالتين اخرج برة اجراء التأكد لأدخل فى اجراء رسم الطلقة 
;ارسم الطلقة فى المحور الجديد و من ثم امسح القديمة

;ثالثا التأكد من ادخال اللاعب اي ادخال على لوحة المفاتيح
; اذا ادخل بالفعل استدعى اجراء للتأكد
;الاجراء يتأكد من ادخال اللاعب  رمز يمين او يسار و فى كلا الحالتين يستدعى اجراء رسم مختلف
; يقوم اجراء الرسم بالتأكد من ان القاذف لا يخرج عن حدود الشاشة غير ذلك يرسم القاذف
; فى حالة ضغط اللاعب على خروج استدعي اجراء الخروج من اللعبة فورا
; فى حالة ضغط اللاعب على مسافة اقوم بالتأكد من وجود اى طلقة على الشاشة
; اذا وجدت لا افعل شئ
; اذا لم يوجد طلقة اقوم ببدء طلقة بعامود يساوى القاذف فى ذلك الوقت
; و لا اقوم برسم الطلقة على اعتبار انها سترسم فى اللفة الرئيسية الجديدة

;رابعا و اخيرا استدعي اجراء الصعوبة
; استدعيه ليقوم باحداث وقفة او delay 
; و ذلك اولا اللعبة سريعة جدا على dosbox
; ثانيا حتى اجعل الصعوبة فى اللعبة تعتمد على مجموع نقاط المسجلة
;توجد 3 مستويات تتحكم فى سرعة اللعبة
; مستوي سهل اقل من 6
; مستوى صعب اقل من 11
; مستوى شديد الصعوبة اكبر من 10
; فى النهاية اقوم ببدأ اللفة الرئيسية من جديد

;======================MACROS======================

; الماكرو دة معمول علشان غرض واحد
; و هو السكور عشان ممكن السكور يبقى اكنر من 9 و انا هحتاج اعرضه
; بيدخل رقم عشري و يخرج جاهز انه يطبع
ConvertDecimal MACRO  decimal, printableDecimal
	mov al,decimal			; فى الأول بحط الرقم فى al
							; و بصفر ah
							; و دة عشان هقسم الرقم العشري 
	xor ah, ah 
	mov cl, 10 				; هقسم الرقم العشري على 10
							; بحط العشرة فى رجستر عشان اعرف استخدم  div
	div cl 					; القسمة على 10 علشان الرقم لما يكون اكبر من 9 اقدر احطه فى مكانين
							; الريماندر هو الرقم اللى على الشمال اما النتيجة هى الرقم اللى على اليمين
							; ah الريماندر
							; النتيجة al
	add ax, 3030h			; دة بزوده عشان احول الرقمين ل ascii 
							; و اقدر اطبع
	mov printableDecimal,ax
	
ENDM ConvertDecimal 
 
; ----------------------------------
;الماكرو دة بستخدمه لطباعة الصواريخ و الخطين فى اعلى الشاشة
;الخوارزمية هنا انى الاول احرك المؤشر
; ثانيا اطبع مسافة ملونة

Print MACRO row, column, color 
   push ax					;عشان الاستخدام الكتير للماكرو و فى اماكن مختلفة من الكود
   push bx					; بعمل للريجسترو بوش فى الستاك و ارجعهم فى الاخر
   push cx					;كدة انا ضمنت ان الريجسترز مش هتتغير فى حالة انى نديت الماكرو
   push dx   		
							
   mov Ah, 02h				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Bh, 0h				; يغهم انى عايز احرك المؤشر
   mov Dh, row				; ريجستر dx هو اللى هيبقى فيه الاحداثيات الجديدة للمؤشر
   mov Dl, column			
   int 10h 					;هنا الانتربت هيخلي المؤشر يتحرك
   mov Ah, 09				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Al, ' '				; يفهم انى عايز اطبع رمز موجود فى الal
   mov Bl, color			; لونه فى الbl
   mov Cx, 1h				;عدد مرات الطباعة cx
   int 10h   				;هنا الانتربت هيخلي المؤشر يتحرك
   
   pop dx					;هنا برجع قيم الرجسترز تانى زي قبل ما انده الماكرو
   pop cx					;برجع القيم من الستاك عكس ما حطيتهم
   pop bx					;عشان الستاك  filo
   pop ax
ENDM Print     

; ----------------------------------
; الماكرو دة بستخدمه لطباعة القاذف فى اخر صف فى الشاشة
; نفس خوارزمية print بالظبط
; الاختلاف انى مباخدش الصف لأنى عارفه وانى مش بطبع مسافة 
; بطبع شكل مختلف

PrintShooter MACRO column
   push ax					;عشان الاستخدام الكتير للماكرو و فى اماكن مختلفة من الكود
   push bx					; بعمل للريجسترو بوش فى الستاك و ارجعهم فى الاخر
   push cx					;كدة انا ضمنت ان الريجسترز مش هتتغير فى حالة انى نديت الماكرو
   push dx   		
   
   mov Ah, 02h				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Bh, 0h				; يغهم انى عايز احرك المؤشر
   mov Dh, 24				; الصف دايما اخر صف فى الشاشة 24
   mov Dl, column			; دة المتغيير اللى داخلو هو العامود
							; ريجستر dx هو اللى هيبقى فيه الاحداثيات الجديدة للمؤشر
   int 10h 					;هنا الانتربت هيخلي المؤشر يتحرك
   
   mov Ah, 09				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Al, 127              
							; يفهم انى عايز اطبع رمز موجود فى الal
							;127=Arrow shape
   mov Bl, 02h				; لونه فى الbl  
							; لون الخط مش لون الخلفية هيبقى لونه اخضر
   mov Cx, 1h				;عدد مرات الطباعة cx
   int 10h   				;هنا الانتربت هيخلي المؤشر يتحرك
   
   pop dx					;هنا برجع قيم الرجسترز تانى زي قبل ما انده الماكرو
   pop cx					;برجع القيم من الستاك عكس ما حطيتهم
   pop bx					;عشان الستاك  filo
   pop ax
ENDM PrintShooter    

; ----------------------------------
; الماكرو دةبستخدمه لطباعة طلقة فى اي مكان فى الشاشة
; نفس خوارزمية print بالظبط
;الاختلاف انى بطبع شكل مختلف بس 

PrintShot MACRO row, column
   push ax					;عشان الاستخدام الكتير للماكرو و فى اماكن مختلفة من الكود
   push bx					; بعمل للريجسترو بوش فى الستاك و ارجعهم فى الاخر
   push cx					;كدة انا ضمنت ان الريجسترز مش هتتغير فى حالة انى نديت الماكرو
   push dx   		
   
   mov Ah, 02h				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Bh, 0h				; يغهم انى عايز احرك المؤشر
   mov Dh, row				; ريجستر dx هو اللى هيبقى فيه الاحداثيات الجديدة للمؤشر
   mov Dl, column
   int 10h 					;هنا الانتربت هيخلي المؤشر يتحرك
   mov Ah, 09				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Al, 254				; يفهم انى عايز اطبع رمز موجود فى الal
							; 254= square shape
   mov Bl, 0Ch				;  لونه فى الbl 
   mov Cx, 1h				;عدد مرات الطباعة cx
   int 10h   				;هنا الانتربت هيخلي المؤشر يتحرك
   
   pop dx					;هنا برجع قيم الرجسترز تانى زي قبل ما انده الماكرو
   pop cx					;برجع القيم من الستاك عكس ما حطيتهم
   pop bx					;عشان الستاك  filo
   pop ax
ENDM PrintShot  

; ----------------------------------
; الماكرودةبستخدمه لطباعة كل السترينج اللى فى اللعبة
; نفس خوارزمية print بالظبط
; بس الاختلاف انى مش بطبع رمز لكن 
; string

PrintText Macro row , column , text
   push ax					;عشان الاستخدام الكتير للماكرو و فى اماكن مختلفة من الكود
   push bx					; بعمل للريجسترو بوش فى الستاك و ارجعهم فى الاخر
   push cx					;كدة انا ضمنت ان الريجسترز مش هتتغير فى حالة انى نديت الماكرو
   push dx   		  
   
   mov Ah, 02h				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Bh, 0h				; يغهم انى عايز احرك المؤشر
   mov Dh, row				; ريجستر dx هو اللى هيبقى فيه الاحداثيات الجديدة للمؤشر
   mov Dl, column
   int 10h 					;هنا الانتربت هيخلي المؤشر يتحرك
   
   mov ah, 9				; الرقم دة حطيته فى الريجستر عشان لماانده الانتربت 21
							; يفه انى عايز اطبع سترينج
   mov dx, offset text		; بحط فى ال dx السترينج
   int 21h					; هنا الانترت يطبع السترينج لحد مياقى 
							;$
							
   pop dx					;هنا برجع قيم الرجسترز تانى زي قبل ما انده الماكرو
   pop cx					;برجع القيم من الستاك عكس ما حطيتهم
   pop bx					;عشان الستاك  filo
   pop ax
ENDM PrintText

; ----------------------------------
; الماكرو دة بستخدمه لمسح اي رمز على الشاشة
; الماكرو بيطبع مسافة لونها اسود على الرمز
; نفس خوارزمية print بالظبط
; الاختلاف ان رمز مسافة دايما لونه اسود

Delete Macro row, column
   push ax					;عشان الاستخدام الكتير للماكرو و فى اماكن مختلفة من الكود
   push bx					; بعمل للريجسترو بوش فى الستاك و ارجعهم فى الاخر
   push cx					;كدة انا ضمنت ان الريجسترز مش هتتغير فى حالة انى نديت الماكرو
   push dx   	
   
   mov Ah, 02h				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Bh, 0h				; يغهم انى عايز احرك المؤشر
   mov Dh, row				; ريجستر dx هو اللى هيبقى فيه الاحداثيات الجديدة للمؤشر
   mov Dl, column
   int 10h 					;هنا الانتربت هيخلي المؤشر يتحرك
   
   mov Ah, 09				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
   mov Al, ' '				; يفهم انى عايز اطبع رمز موجود فى الal
   mov Bl, 0h				; لونه فى الbl  
							; 00: لون اسود
   mov Cx, 1h				;عدد مرات الطباعة cx
   int 10h   				;هنا الانتربت هيخلي المؤشر يتحرك
   
   pop dx					;هنا برجع قيم الرجسترز تانى زي قبل ما انده الماكرو
   pop cx					;برجع القيم من الستاك عكس ما حطيتهم
   pop bx					;عشان الستاك  filo
   pop ax
ENDM Delete

; ----------------------------------
; الماكرو دة بستخدمه لتأخير اللعبة 
; السبب ان اللعبة اسرع بكتير من ان العين البشرية تلاحظ التغيير
;بستخدمه برضه انى اسرع اللعبة فى الليفل الصعب
; لواللعبة هتشتغل على الemu8086
; الماكرو دي مش هنحتاجها

Delay  Macro Seconds, MilliSeconds
   push ax					;عشان الاستخدام الكتير للماكرو و فى اماكن مختلفة من الكود
   push bx					; بعمل للريجسترو بوش فى الستاك و ارجعهم فى الاخر
   push cx					;كدة انا ضمنت ان الريجسترز مش هتتغير فى حالة انى نديت الماكرو
   push dx   		

    mov cx, Seconds		     ;Cx,Dx : عدد الثواني اللي هياخروهم
    mov dx, MilliSeconds
    mov ah, 86h				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت 15 يفهم ينفذ ايه
    int 15h					; هنا الانتربت هيوقف الكود المدة اللى موجودة فى 
							;Cx,Dx
	
   pop dx					;هنا برجع قيم الرجسترز تانى زي قبل ما انده الماكرو
   pop cx					;برجع القيم من الستاك عكس ما حطيتهم
   pop bx					;عشان الستاك  filo
   pop ax
ENDM Delay 

; ----------------------------------
; الماكرو دة بستخدمه لمسح كل اللي على الشاشة
; خوارزمية الماكرو هي نداء انتربت 10
; لمسح الشاشة ثم وضع المؤشر على اول الشاشة الجديدة

ClearScreen MACRO
    
   push ax					;عشان الاستخدام الكتير للماكرو و فى اماكن مختلفة من الكود
   push bx					; بعمل للريجسترو بوش فى الستاك و ارجعهم فى الاخر
   push cx					;كدة انا ضمنت ان الريجسترز مش هتتغير فى حالة انى نديت الماكرو
   push dx   		
   
    mov ax, 0600h  			;al=0 الرقم دة حطيته فى الريجستر عشان لما انده الانتربت 10 يبدا المسح
    mov bh, 07     			;bh=07 تحديد سمات المسح              
    mov cx, 0      			;النقطة الليى هيبدأ المسح عندها (cl=column, ch=row)
    mov dl, 80     			; dl=column
    mov dh, 25     			; dh=row
							; النقطة اللى هينتهى المسح عندها
    int 10h    	   			; هنا الانتربت هيبدأ المسح
    
    ;تحريك لمؤشر لاول الشاشة الجديدة
    mov Ah, 02h				; الرقم دة حطيته فى الريجستر عشان لما انده الانتربت عشرة
    mov Bh, 0h				; يغهم انى عايز احرك المؤشر
    mov dx, 0				; ريجستر dx هو اللى هيبقى فيه الاحداثيات الجديدة للمؤشر
							; فيه صفر عشان يبقى عند عامود و صف صفر اول الشاشة
    int 10h   				;هنا الانتربت هيخلي المؤشر يتحرك
    
   pop dx					;هنا برجع قيم الرجسترز تانى زي قبل ما انده الماكرو
   pop cx					;برجع القيم من الستاك عكس ما حطيتهم
   pop bx					;عشان الستاك  filo
   pop ax
ENDM ClearScreen
;==================================================================================
;==================================================================================
;==================================================================================
.MODEL SMALL
.STACK 64    
.DATA 

;اي صاروخ فى اللعبة هو ثلاث مسافات و هنا احتفظ باحداثيتهم
RocketColLeft          	db		?								;المسافة التى تقع فى الشمال							 										 
RocketColRight         	db		? 								;المسافة التى تقع فى اليمين
RocketColCenter	       	db		?								;المسافة التى فى الوسط
;احتفظ بالصف الذي يتحرك فيه الصاروخ حيث انه يتغير كل مرة
RocketRow              	db      15    							;الصف الذي يتغير فيه العامود 
;احتفظ بلون الصاروخ حيث انه يتغير كل مرة
RocketColor            	db      0d0h    						;لون الصاروخ
;احتفظ باتجاه الصاروخ حيث انه يتغير كل مرة
RocketDirection	       	db      0								;اتجاه الصاروخ صفر تعنى يسار,واحد تعنى يمين

ShooterCol             	db      40								;العامود الذي يتحرك فيه القاذف

ShotRow                	db      ?								;الصف الذي يتحرك فيه الطلقة
ShotCol                	db      ?								;العامود الذي يتحرك فيه الطلقة
ShotStatus             	db      0    							;حالة الطلقة واحد يعنى توجد طلقة , صفر تعنى لا يوجد طلقة

lifes                  	db      6								;نقاط الحياة
Misses                 	db      0								;نقاط الاخفاق
Hits                   	db      0						;Score	;نقاط النجاح

;------------------ Strings -----------------------------
PlayerName	       	   	db      15, ?,  15 dup('$')				;اسم اللاعب
AskPlayerName	       	db      'Enter your name: ','$'			;للسؤال عن اسم اللاعب
Disp_Hits	       	   	db      'Score: ??','$'					;عرض النتيجة
Disp_lifes             	db      'lifes: ?','$'					;عرض نقاط الحياة
GameTitle	       	   	db      ' >>  Shooting rockets Game  >> ','$'	; اسم اللعبة
FinalScoreString       	db      'Your final score is: ??','$'			;عرض النتيجة بعدانتهاء اللعبة
; عرض اوضاع اللعبة
EasyMode	       		db      'Easy Mode','$'							;وضع اللعبة السهل	
HardMode	       		db      'Hard Mode','$'							;وضع اللعبة الصعب
ExtremeMode	       		db      'Extreme Mode','$'						;وضع اللعبة المستحيل
Instruction	       		db      'Press ESC to exit - Space to fire - Right/Left arrows to move','$'	;عرض ارشادات اللعب
separate				db		'>>','$'								; عرض فاصل
		;عرض قائمةالبدءو النهاية
		;تبنى على فكرة ان انتربت 21 يقوم بالطباعة حتى يصل الى علامة
		;'$'
StartScreen			 	db '              ====================================================',0ah,0dh
	db '             ||                                                  ||',0ah,0dh                                        
	db '             ||         >>  Shooting rockets Game  <<            ||',0ah,0dh
	db '             ||__________________________________________________||',0ah,0dh
	db '             ||                                                  ||',0ah,0dh          
	db '             ||     Use left and right key to move gunshooter    ||',0ah,0dh
	db '             ||          and space button to shoot bullet        ||',0ah,0dh
	db '             ||                                                  ||',0ah,0dh
	db '             ||              You begin with 6 lifes              ||',0ah,0dh
	db '             ||  Score the highest you can score before you die  ||',0ah,0dh
	db '             ||        Scoring points increase your lifes        ||',0ah,0dh
	db '             ||                                                  ||',0ah,0dh
	db '             ||                                                  ||',0ah,0dh
	db '             ||            Press Enter to start playing          ||',0ah,0dh 
	db '             ||            Press ESC to Exit                     ||',0ah,0dh
	db '             ||                                                  ||',0ah,0dh
	db '             ||                                                  ||',0ah,0dh
	db '             ||           Created by Michael khalil              ||',0ah,0dh	
	db '              ====================================================',0ah,0dh
	db '$',0ah,0dh
GameoverScreen			 db '          __________________________________________________',0ah,0dh
	db '             ||                                                  ||',0ah,0dh                                        
	db '             ||               >> GAMEOVER <<                     ||',0ah,0dh
	db '             ||__________________________________________________||',0ah,0dh	
	db '$',0ah,0dh
;==================================================

.CODE   
MAIN    PROC FAR  
    mov ax, @DATA
    mov ds, ax  
    
  ClearScreen						;نداء ماكرو لمسح الشاشة
  call StartMenu					;نداء اجراء لعرض قائمة البدء
  ClearScreen						;مسح الشاشة ثانية بعد عرض قائمة البدء
  call DrawInterface				;عرض الكل الاولى للعبة
  call ResetRocket					;اعادة تعيين صاروخ
									;اقوم بنداء هذا الاجراء هنا حتى اعين صف و لون و اتجاه مختلفين
  PrintShooter 40					; عرض القاذف عند منتصف الشاشة
									; اقوم بعرضه فى البداية حيث انه لا يعرض الا عند ضغط اللاعب يمين او يسار
  call UpdateStrings				; لوضع القيم الصحيحة من نقاط و حياة و غيره و عرضهم
  
  MainLoop:							; الدخول فى اللفة الرئيسية للعبة
  
  ;اولا عرض الصاروخ
   cmp RocketDirection, 1			;اقارن اتجاة الصاروخ مع واحد 
   jz moveRocketRight				;اذا ساوى الواحد يعنى انه يتجه يمين
   call RocketMoveLeft				;اذا لم يساوى اذن فهو يتحرك لليسار
									;هذا الاجراء يقوم بتحريك الصاروخ لليسار
   jmp AfterRocketMove
   
   moveRocketRight:
   call RocketMoveRight				;هذا الاجراء لا ينفذ الا اذا كان الاتجاه يمين
									;يقوم بتحريك الصاروخ لليمين
   ; ثانيا تحريك الطلقة
   AfterRocketMove:
   cmp ShotStatus, 1				;اقارن حالة الطلقة مع واحد
   jnz NoShotExist					; اذا لم يساوي اذن لا وجود لطلقة على الشاشة
   call CheckShotStatus			 	; اولا استدعى اجراء للتأكد من اذا كانت الطلقة يمكن ان ترسم
									; الطلقة يمكن ان تواجه صاروخا او ان تواجه نهاية الشاشة
									;يمكن ان امسح الطلقة داخل الاجراء فلذا
   cmp ShotStatus, 1				; اقارن حالة الطلقة مع واحد مجددا
   jnz NoShotExist					; اذا لم يساوي اذن لا وجود لطلقة على الشاشة
   call MoveShot					; الان يمكن ان احرك الطلقة بأمان
   
   PrintShooter ShooterCol		    ; هناارسم القاذف فى المكان المعين ان يكون فيه
									
  ; ثالثا التأكد من ادخالات اللاعب
   NoShotExist:       
   mov ah,1h					; اضع الرقم المخصص فى رجستر ah
								; تجهيزا لنداء انتربت 16
   int 16h             			; فى هذه الحالة اتأكد اذاكان اللاعب ادخل اي ادخال من الكيبوردللبافر
								;اذاادخل بالفعل فال 
								; ZF=0
   jz NokeyPress				; اذا لم يدخل اللاعب اي ادخال
   call KeyisPressed			;هذا الاجراء فى حالة ادخال اللعب لاي ادخال
   
   ; رابعا التحكم فى صعوبة اللعبة
   NokeyPress:
   call Difficulty				; استدعي هذا الجراء دائما حيث يغير التأخر فى اللعبة اعتمادا على سكور اللاعب
   
   EndOfMainLoop:
   jmp MainLoop					; اللفة الرئيسية تتكرر بلا شروط
   hlt
MAIN        ENDP 

;==================================================
;اعادة تعيين السترينجز

UpdateStrings Proc  
	 push ax							;اقوم بوضع ax 
										;فى الستاك خوفا من تغيره فى داخل كود اخر و لأنه الوحيد الذي اغير فيه فى الاجراء
	 
     ;اولا تحديث السترينجز
	 
	 ; بما ان السكور يمكن ان يزيد عن 9 فأقوم بنداء ماكرومخصصة
	 ;لتحويل الرقم العشري لم يناسبه مطبوع لascii
	 
	 ConvertDecimal Hits, ax			; ax يحمل السكور
	 ;اضع قيم السكور فى 2 سترنجز 
	 mov Disp_Hits[8], ah				; ترتيب الوضع 
	 mov FinalScoreString[22], ah		;al ah
	 mov Disp_Hits[7], al				
	 mov FinalScoreString[21], al		;حيث ان ah 
										; هو remainder
										;وبالتالى هو الاحادى اما الاخر عشري
		
     mov ah,lifes						;ah يحمل نقاط الحياة
     add ah, 30h						;لا استدعى ماكرو هنا حيث ان الرقم دائما اقل من 10
   	 mov Disp_lifes[7], ah
	
	;ثانيا طباعتهم
	PrintText 1 , 56 , Disp_Hits
	PrintText 1 , 70 , Disp_lifes	

	pop ax								;اقوم بارجاع ax 
										;من الستاك ليكون بالقيمة التى كانت قبل نداء الاجراء
	ret             
UpdateStrings ENDP 

;==================================================
;تحريك الصاروخ لليسار
;خوارزمية الطباعة واحدة فى الكود
;اولا طباعة الرمز فى المكان الجديد
;ثانيا مسح الرمز من المكان القديم
;لأن عكس الترتيب يؤدي لوجود لحظة يكون فيها الرمزين ممسوحين
; و شكل ذلك ليس جيدا 

RocketMoveLeft Proc   
	;اولا تحريك الصاروخ
    dec RocketColLeft					;بما انه تحريك لليسار فنقوم بتقليل قيمة العامود لرمز الذي على اليسار
    Print   RocketRow ,RocketColLeft, RocketColor ; تنفيذ الحركة
	
    Delete RocketRow, RocketColRight     ;مسح العامود للصاروخ الذي على اقصى اليمين
    dec RocketColRight  			     ;و اخيرا تقليل قيمة كلا من العامود يمين و ووسط
    dec RocketColCenter
	
	;ثانيا التأكد من الوصول لنهاية الشاشة
    cmp RocketColLeft ,0   				;التأكد من وصول الصاروخ لحدود يسار لشاشة
    Jnz endOfRocketMoveLeft 			; اذا لم يصل بعد
    call DeleteRocket					; اذاوصل امسح الصاروخ
    call ResetRocket					;و اعيد تعيينه بارقام عشواية جديدة
    endOfRocketMoveLeft: ret              
RocketMoveLeft ENDP 

;==================================================
;تحريك الصاروخ لليمين
;مشابهة لتحريك لليسار

RocketMoveRight Proc   
	;اولا تحريك الصاروخ
    inc RocketColRight					;بما انه تحريك لليمين فنقوم بزيادة قيمة العامود لرمز الذي على اليمين
    Print   RocketRow ,RocketColRight, RocketColor ; تنفيذ الحركة
    
	Delete RocketRow, RocketColLeft     ;مسح العامود للصاروخ الذي على اقصى اليسار
    inc RocketColleft 					 ;و اخيرا زيادة قيمة كلا من العامود يمين و ووسط
    inc RocketColCenter
	
	;ثانيا التأكد من الوصول لنهاية الشاشة
    cmp RocketColRight ,80   			;التأكد من وصول الصاروخ لحدود يمين لشاشة
    Jnz endOfRocketMoveRight 			; اذا لم يصل بعد
    call DeleteRocket					; اذاوصل امسح الصاروخ
    call ResetRocket					;و اعيد تعيينه بارقام عشواية جديدة
    endOfRocketMoveRight: ret              
RocketMoveRight ENDP 

;==================================================
; التأكد من ضغطة اللاعب على الكبيورد
KeyisPressed  Proc 
    mov ah,0							; اضع الرقم المخصص فى رجستر ah
										; تجهيزا لنداء انتربت 16
										; فى هذه الحالة اتأكد اذاكان اللاعب ادخل اي ادخال من الكيبوردللبافر
	int 16h								; تنفيذ الانتربت سيضع كود الزر فى رجستر ax
										;scan code يضع فى ah

    cmp ah,4bh                          ; مقارنة الزر المضغوط و كود سهم اليسار
    jnz NotLeftKey						;اذا لم يكن سهم اليسار
    call MoveShooterLeft 				; غير ذلك استدعي اجراء تحريك القاذف لليسار
    jmp EndofKeyisPressed				; من ثم انهاء الاجراء كله
	
    NotLeftKey:
    cmp ah,4dh							; مقارنة الزر المضغوط و كود سهم اليمين
    jnz NotRightKey			 			;اذا لم يكن سهم اليمين
										;غير ذلك
    call MoveShooterRight				; استدعي اجراء تحريك القاذف لليمين
    jmp EndofKeyisPressed				; من ثم انهاء الاجراء كله
	
    NotRightKey:
    cmp ah,1H                 	 		; مقارنة الزر المضغوط و كود زر الخروج
	jnz NotESCKey						;اذا لم يكن زر الخروج
										;غير ذلك
	call Gameover 						;استدعى اجراء نهاية اللعبة
		
	NotESCKey:
    cmp ah,39h                          ; مقارنة الزر المضغوط و كود زر مسافة
    jnz EndofKeyisPressed				;اذا لم يكن زر المسافة
										;غير ذلك
										
    cmp ShotStatus, 1					;تأكد من وجود طلقة فى الشاشة بمقارنة حالة الطلقة مع واحد
    jz EndofKeyisPressed				;اذا كان هناك طلقة فى الشاشة 
										; غير ذلك	
										
	;الان اللاعب ضغط على مسافة و لا وجود طلقة فى الشاشة
    mov al,1                      	  	;سأغير حالة الطلقة لتصبح موجودة بوضع واحد
    mov ShotStatus,1 					; لم اضعها مباشرة و استخدمت ريجستر حتى لا تصبح   Illegal mode
	
    mov al, ShooterCol					;وضع عامود القاذف فى تلك اللحظة فى عامود الطلقة
    mov ShotCol, al						; ايضا استخدمت ريجستر فى تلك العملية حتى لا تصبح illegal mode
	
    mov al, 24				  			;وضع صف الطلقة ب 24
    mov ShotRow,al 						; هو معلوم و ثابت حيث ان الطلقة دائما تبدأ من اخر صف
			
    EndofKeyisPressed:					;نهاية الاجراء
    ret
KeyisPressed  ENDP 

;==================================================
;تحريك القاذف لليسار
MoveShooterLeft  Proc  
     cmp ShooterCol, 0					; اولا قبل التحريك التأكد من ان القاذف لا يقف فى اقصى يسار الشاشة
     JZ NoMoveLeft						;  اذا كان يقف اذهب لنهاية الاجراء
										; غير ذلك
     dec ShooterCol						;بما انه تحريك لليسار فنقوم بتقليل قيمة العامود للرمز
     PrintShooter ShooterCol 			;و من ثم طباعة الرمز
	
	; يجب الان مسح الرمز المتبقى على اليمين
     mov al, ShooterCol   				;نزيد القيمة ثانية
     inc al								;حتى نستطيع مسح الرمز الذى على اليمين
     delete 24, al						;هنا نقوم بالمسح
    NoMoveLeft:
    ret									; نهاية الاجراء
MoveShooterLeft  ENDP 

;==================================================
;تحريك القاذف لليمين
MoveShooterRight  Proc 
     cmp ShooterCol, 79					; اولا قبل التحريك التأكد من ان القاذف لا يقف فى اقصى يمين الشاشة
     JZ NoMoveRight						;  اذا كان يقف اذهب لنهاية الاجراء
										; غير ذلك
     inc ShooterCol						;بما انه تحريك لليمين فنقوم بزيادة قيمة العامود للرمز
     PrintShooter ShooterCol  			;و من ثم طباعة الرمز
	 
	 ; يجب الان مسح الرمز المتبقى على اليسار
     mov al, ShooterCol   				;نقلل القيمة ثانية
     dec al								;حتى نستطيع مسح الرمز الذى على اليسار
     delete 24, al 						;هنا نقوم بالمسح
     NoMoveRight:
    ret									; نهاية الاجراء
MoveShooterRight  ENDP 

;==================================================
;تحريك الطلقة
MoveShot  Proc 
    dec ShotRow							; تقليل الصف الذي تقع عليه الطلقة
    PrintShot ShotRow,ShotCol 			; الطباعةعلى الصف الجديد
	
	; الان اصبح لدينا طلقتين مطبعتين فوق بعض
	;يجب مسح التى فى الاسفل 
    mov al, ShotRow  					;نقوم بزيادة الصف
    inc al								;حتى نستطيع مسح الطلقة التى فى الاسفل
    delete al, ShotCol    				;هنا يتم المسح
    ret									;نهاية الاجراء
MoveShot  ENDP 

;==================================================
;التأكد من حالة الطلقة
; اولا التأكد ان الطلقة سترسم على صاروخ
;ثانيا التأكد ان الطلقة وصلت لنهاية الشاشة
CheckShotStatus  Proc
    push ax								;اقوم بوضع ax 
										;فى الستاك خوفا من تغيره فى داخل كود اخر و لأنه الوحيد الذي اغير فيه فى الاجراء
	
    mov ah,RocketRow					;زيادة صف الصاروخ بواحد
    inc ah              				;ذلك سيساعد فى المقارنة فى حالة ان الطلقة
										;تقف مباشرة قبل العامود
    cmp ah, ShotRow 					;مقارنة صف الطلقة مع الصف الذى قبل الصاروخ
    JNZ CheckEndRange 					;فى حالة ان الطلقة لم تكن تقف فى ذلك الصف
										;غيرذلك
	; هنا اقوم بالتأكد اذا كانت الطلقة ستضرب الصاروخ	
	
        mov al,ShotCol					;اقارن عامودالطلقة مع عامود الثلاث رموز الذين يمثلو الصاروخ
        cmp al, RocketColLeft
        JZ Hit      					;فى حالة ان عامود الصاروخ قد ساوى عامود الطلقة تعنى انها سوف تلمس الصاروخ
		cmp al, RocketColCenter
		JZ Hit							;فى حالة ان عامود الصاروخ قد ساوى عامود الطلقة تعنى انها سوف تلمس الصاروخ
        cmp al, RocketColRight
        JZ Hit 							;فى حالة ان عامود الصاروخ قد ساوى عامود الطلقة تعنى انها سوف تلمس الصاروخ
		
		;بعد تجربة اللعبة اكتشفت حالة حيث ترسم الطلقة ومن ثم يمر من فوقها الصاروخ
		;كأن الصاروخ يواجه الطلقة امامه
		;فقررت اعتبارها حالة لمس الصاروخ
		;هذه الحالة تعتمد على اتجاه الصاروخ
		
		cmp RocketDirection, 0			;مقارنة اتجاه الصاروخ مع الصفر 
		jnz RightDirection				; اذا لم يساوى اذن الصاروخ يتحرك لليمين
										; غير ذلك الصاروخ يتحرك لليسار
		mov ah, RocketColLeft			; هنا ااخذ الرمز الذي يمثل يسار الصاروخ
		dec ah							; انقص واحد منها حتى استطيع المقارنة
		cmp al, ah						; بمقارنة عامود الطلقة مع العامود الذي يقع فى اليسار
        JZ Hit							; اذا ساو بعض اعتبرها لمست
		jmp CheckEndRange				; غير ذلك فأذهب للتأكد التالى
		RightDirection:
		mov ah, RocketColRight			; هنا ااخذ الرمز الذي يمثل يمين الصاروخ
		inc ah							; ازيد عليه واحد حتى استطيع المقارنة
		cmp al, ah						; بمقارنة عامود الطلقة مع العامود الذي يقع فى اليمين
        JZ Hit							; اذا ساو بعض اعتبرها لمست
										; غير ذلك فأذهب للتأكد التالى
										
										
	; هنا اقوم بالتأكد اذا كانت الطلقة وصلت نهاية الشاشة
   CheckEndRange:
	 cmp ShotRow, 2						;اقارن عامود الطلقة مع العامود 2 الذي يسبق نهاية الشاشة
	 jnz noChange						;اذا لم يساوى فاخرج من اجراء التأكد
										;غير ذلك فيعنى محاولة فاشلة
	 dec Lifes							;تقليل عدد نقاط الحياة بواحد
	 cmp lifes, 0						;مقارنة نقاط الحياة مع صفر
     jnz ResetTheShot					; اذا لم يساوي صفر 
     call Gameover						; غير ذلك فقد ساوى صفر فاستدعي قائمة النهاية
	 
     Hit: inc Hits						;ازيد نقاط النجاح فى حالة اللمس مع صاروخ
	 inc lifes							;ازيد ايضانقاط الحياة
	 call DeleteRocket					;استدعى اجراء الغاء الصاروخ
	 call ResetRocket					;استدعى اجراء اعادة تعيين صاروخ
	 ResetTheShot:						;فى حالة لمس الصاروخ او وصول الطلقة للنهاية
     call ResetShot						;اعادة تعيين طلقة 
     call UpdateStrings					;تحديث السكور و خلافه المعروض
     noChange:							;نهاية الاجراء
	 
    pop ax										;اقوم بارجاع ax 
										;من الستاك ليكون بالقيمة التى كانت قبل نداء الاجراء
    ret    
CheckShotStatus ENDP 

;==================================================
;اجراء تغيير الصعوبة

Difficulty Proc
	
	cmp Hits, 5							;مقارنة السكور الحالي ب 5
	jle EasyGame						;اذا ساوي او كان اصغر فاذهب للعبة سهلة
	cmp Hits, 10						;مقارنة السكور الحالي ب 10
	jle HardGame						;اذا ساوى او كان اقل اذهب للعبة صعبة
									    ; غير ذلك لعبة خارقة فى سكور اعلى من 10
	Delay 0,10000						;تعيين اقل ديلاي ممكن
	PrintText 0, 67, ExtremeMode 		;طباعة نوع اللعبة
	jmp EndDifficulty					;انهاء الاجراء
	
	HardGame: Delay 0,20000				;لعبة صعبة عندما يكون السكور اعلى ن 5 و اقل من 11
	PrintText 0, 70, HardMode			;تعيين اقل ديلاي مناسب و عرض نوع اللعبة
	jmp EndDifficulty					;انهاء الاجراء
	
	EasyGame: Delay 1,0					;لعبة سهلة عندما يكون السكور 5 او  اقل
										;تعيين اعلى ديلاي للعبة 
	EndDifficulty:						;انهاء الاجراء
	ret
Difficulty ENDP
;==================================================
;اجراء مسح الصاروخ يمسح الثلاث رموز معا
DeleteRocket Proc
	 Delete RocketRow, RocketColLeft	;مسح رمز الصاروخ على اليسار
	 Delete RocketRow, RocketColCenter	;مسح رمز الصاروخ  فى المنتصف
	 Delete RocketRow, RocketColRight	;مسح رمز الصاروخ على اليمين
	ret									;نهاية الاجراء
DeleteRocket ENDP

;==================================================
; اجراء وضع عشوائية لصف الصاروخ
;بعد بحث على الانترنت وجدت ان الكميوتر صعب ان اوجد فيه العشوائية
; برغم انى هعمل عشوائية مبنية على وقت النظام الا ان
; مهما عملت الارقام هتكرر بدون تدخل من اللاعب
; تدخل اللاعب ضروري لتغيير القيم

RandomiseRocketRow Proc    
   push ax								;حتى لا اغير قيم الريجسترز اضع القيم فى ستاك
   push bx
   push cx
   push dx 
   
   mov ah, 2ch                			;اضع تلك القيمة فى الريجستر تجهيزا لاستدعاء الوقت فى النظام
   int 21h                      		;بداء انتربت 21 اصبح لدينا الوقت فى الريجسترز
										; DH = الثواني   Dl=MilliSeconds
   xor ax, ax							; اجعل ax صفر
   mov al, dl							;اضع اجزاء الثانية فى al 
    									;لأجهزه للقسمة
										; سأقسم على 20 فيكون 
										;remainder = [0-19]
   mov bl, 20
   
   div bl								;الناتج الان فى نطاق من صفر ل 19
   add ah, 3							;فى حالة جمع 3 على الريمياندر
										;اصبح نطاق الارقام من 3 حتى 22
   mov RocketRow, ah   	 				;الارقام تصدرعشوائية بين قيم انا اريدها
										;اخيرا اضع الناتج فى صف الصاروخ
   
   ;تغيير لون الصاروخ
   NotBlack:
   add RocketColor ,10h					;زيادة واحد فى كل مرة على لون الخلفية للصاروخ
	;عند التجربة وجدت ان اللون الأسود وارد ان يطبع
	;هنا للتأكد ان اللون الاسود لن يطبع
   mov ah, RocketColor					
   and ah, 10h							;مقارنة فقط مع لون الخلفية
   cmp ah ,00h							;مقارنة لون الخلفية مع اللون الاسود
   jz NotBlack							;اذا ساوت الاسود كرر عملية الجمع مرة اخرى
        
   pop dx								;هنا ارجع القيم كما كانت قبل نداء الاجراء
   pop cx								;ارجاع القيم فى الستاك عكس ترتيب وضعهم
   pop bx								;لأن الستاك  filo
   pop ax
   ret  								;نهاية الاجراء
RandomiseRocketRow ENDP 

;==================================================
;  اجراء اعادة تعيين الصاروخ
; يقوم الاجراء بتغيير الصف و اللون و الاتجاه للعامود
;  من ثم يقوم الاجراء برسم صاروخ مبدئي على حواف الشاشة سواء من اليمين او اليسار
ResetRocket Proc
    call RandomiseRocketDirection		; نداء لاجراء وضع اتجاه عشوائي
	call RandomiseRocketRow				; نداء لاجراء وضع صف و لون عشوئي
	
	cmp RocketDirection, 1				;مقارنة اتجاه الصاروخ مع واحد
	jnz movementLeft					;اذا ساوى يعنى انه يتحرك لليسار
										; غير ذلك فهو يتحرك لليمين
	; رسم صاروخ على يسار الشاشة									
	mov RocketColLeft, 0	 			
    mov RocketColCenter, 1
	mov RocketColRight, 2
	; انهاء الاجراء
	jmp EndOfResetRocket
	
	movementLeft:
	; رسم صاروخ على يمين الشاشة
	mov RocketColLeft, 78	
	mov RocketColCenter, 79
	mov RocketColRight, 80
    ; انهاء الاجراء
    EndOfResetRocket: 
    ret 
ResetRocket ENDP 

;==================================================
; اجراء تغيير اتجاه الصاروخ بشكل عشوائي
;يشبه تماما اجراء تغيير صف العامود بشكل عشوائي
RandomiseRocketDirection Proc
   push ax								;حتى لا اغير قيم الريجسترز اضع القيم فى ستاك
   push bx
   push cx
   push dx 
   
   mov ah, 2ch                			;اضع تلك القيمة فى الريجستر تجهيزا لاستدعاء الوقت فى النظام
   int 21h                      		;بداء انتربت 21 اصبح لدينا الوقت فى الريجسترز
										; DH = الثواني   Dl=MilliSeconds
   xor ax, ax							; اجعل ax صفر
   mov al, dl							;اضع اجزاء الثانية فى al 
    									;لأجهزه للقسمة
   mov bl, 2							;سأقوم بالقسمة على اثنين فيكون
   div bl								;remainder = [0-1]
   
   mov RocketDirection,ah				;الارقام تصدرعشوائية بين قيم انا اريدها
										;اخيرا اضع الناتج فى اتجاه الصاروخ

   pop dx								;هنا ارجع القيم كما كانت قبل نداء الاجراء
   pop cx								;ارجاع القيم فى الستاك عكس ترتيب وضعهم
   pop bx								;لأن الستاك  filo
   pop ax
   ret  								;نهاية الاجراء
RandomiseRocketDirection ENDP

;==================================================
;اجراء اعادة تعيين طلقة
ResetShot Proc
	;اولا اقوم بمسح طلقة
	 delete ShotRow, ShotCol  			;نداء ماكرو لمسح الطلقة ند الاحداثيات الخاصة بها
	 ;ثانيا اقوم بتغيير حالة الطلقة لتكون صفر اي غير موجودةعلى الشاشةخاصة بها
     mov al,0          					;نداء ماكرو لمسح الطلقة عند الاحداثيات الخاصة بها
     mov ShotStatus,al 
	ret
ResetShot ENDP 
;==================================================
;اجراء عرض شاشة البدء

StartMenu Proc
	push ax								;حتى لا اغير قيم الريجسترز اضع القيم فى ستاك
    push bx
    push cx
    push dx 

	ClearScreen							;نداء ماكرو مسح الشاشة
	LoopOnName:
	PrintText 8,8,AskPlayerName			;نداء ماكرو لسؤال اللاعب عن اسمه

	;Receive player name from the user
	mov ah, 0Ah							;وضع قيمة فى الرجستر تجهيزا لنداء انتربت لاستقبال ادخال من اللاعب
	mov dx, offset PlayerName			;وضع ما ادخله اللاعب فى بى الذاكرة
	int 21h								;نداء الانتربت لقراءة ادخال اللاعب ووضعه فى الذاكرة
	mov bl,PlayerName[1]				;نقل الحجم الحقيقى لاسم اللاعب فى bl
    mov ah,'$'							;لعمل نهاية للسترينج نضع علامة الدولار
    mov PlayerName[bx+2],ah 			;نزيد على الحجم الحقيقى لاسم اللاعب اتنين حتى اصل لنهاية السترينج
	 
	
	cmp PlayerName[1], 0				;للتأكداذا كان اللاعب لم يدخل شئ
	jz LoopOnName						;فى هذه الحالة اعد من جديد

	ClearScreen							;نداء ماكرو مسح الشاشة
	PrintText 1,1,StartScreen			;داء ماكرو لطباعة شاشة البدء

	
	 mov ah,01h							;وضع قيمة الرجستر لتجهيز انتربت لاخفاء المؤشر
	 mov cx,2607h 						;وضع تلك القيمة فى الريجستر يه لوضع مؤشر خفي
	 int 10h							;هنا يتم تنفيذ العملية

	checkforinput:
	mov ah,0							; اضع الرقم المخصص فى رجستر ah
										; تجهيزا لنداء انتربت 16
										; فى هذه الحالة اتأكد اذاكان اللاعب ادخل اي ادخال من الكيبوردللبافر
	int 16h								; تنفيذ الانتربت سيضع كود الزر فى رجستر ax
										

	cmp al,13              		     	;مقارنة الزر المضغوط مع 13 
										;و ذلك يعنى ان الزر المضغوط هو زر enter
	jz StartTheGame						;فى حالة مساواته يخرج من الاجراء

										;scan code يضع فى ah
	cmp ah,1H                 		 	;مقارنة الزر المضغوط مع  زر خروج 
	jz ExitMenu							;اذا ساوى يخرج من اللعبة
	jnz checkforinput					;اذا لم يساوي يعيد التأكد من وجود ادخال

	ExitMenu:
	mov ah,4CH							;نضع القيمة فى الرجستر تجهيزا لانتربت الخروج من اللعبة
	int 21H								;عند تنفيذ الاجراء تخرج من اللعبة

	StartTheGame: 
	pop dx								;هنا ارجع القيم كما كانت قبل نداء الاجراء
	pop cx								;ارجاع القيم فى الستاك عكس ترتيب وضعهم
	pop bx								;لأن الستاك  filo
	pop ax
	ret  	
StartMenu ENDP
;==================================================
;اجراء عرض شاشة انتهاء اللعبة

 Gameover Proc 
	ClearScreen							;اولا نداء ماكرو مسح الشاشة

	PrintText 1, 30, PlayerName			;نداء ماكرو لعرض اسم اللاعب
	PrintText 3, 25,FinalScoreString	;نداء ماكرو لعرض النتيجة النهائية
	PrintText 5, 5 ,GameoverScreen		;نداء ماكرو لعرض نهاية اللعبة
 
    mov ah,4CH							;نضع القيمة فى الرجستر تجهيزا لانتربت الخروج من اللعبة
	int 21H								;عند تنفيذ الاجراء تخرج من اللعبة
    ret
 Gameover ENDP 
;==================================================
;اجراء رسم اللعبة فى البداية

DrawInterface	Proc
	
	push ax								;حتى لا اغير قيم الريجسترز اضع القيم فى ستاك
	push cx
	
	; طباعة خط ازرق
	mov al, 0
	mov cx, 80							;عدد مرات الطباعة	
	DrawLineloop1:
		Print 1, al, 30h					
		inc al							;زيادة العامود كل لفة		
	loop DrawLineloop1					;انقاص cx 
										;و اعادة اللفة فى حالة انها ليست صفر
	
	mov al,0
	mov cx, 65							;عدد مرات الطباعة
	DrawLineloop2:
		Print 0, al, 70h
		inc al							;زيادة العامود كل لفة	
	loop DrawLineloop2					;انقاص cx
										;و اعادة اللفة فى حالة انها ليست صفر
																		
	mov al,' '	
	mov PlayerName[0],al				;وضع مسافتين اول السترنيج المسؤلعن اسم اللاعب 	
	mov PlayerName[1],al				;للتخلص من الرقمين و لتجهيزه للعرض
	;طباعة كل السترينجز الاولية فى اماكن مختلفة باستخام ماركو الطباعة
	PrintText 1 , 0 , PlayerName
	PrintText 1 , 56 , Disp_Hits
	PrintText 1 , 70 , Disp_lifes	
	PrintText 1 , 24 , GameTitle
	PrintText 0, 70, EasyMode
	PrintText 0, 2, Instruction
	PrintText 1, 67,separate
	
	pop cx								;هنا ارجع القيم كما كانت قبل نداء الاجراء
	pop ax								;ارجاع القيم فى الستاك عكس ترتيب وضعهم
	ret									;لأن الستاك  filo
DrawInterface	ENDP

;==================================================
END MAIN    



